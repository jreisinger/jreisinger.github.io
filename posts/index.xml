<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on $USER</title>
    <link>http://jreisinger.github.io/posts/</link>
    <description>Recent content in Posts on $USER</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Aug 2018 15:33:02 +0200</lastBuildDate>
    
	<atom:link href="http://jreisinger.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>http://jreisinger.github.io/posts/test/</link>
      <pubDate>Mon, 06 Aug 2018 15:33:02 +0200</pubDate>
      
      <guid>http://jreisinger.github.io/posts/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Devops</title>
      <link>http://jreisinger.github.io/posts/devops/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jreisinger.github.io/posts/devops/</guid>
      <description>The opposite of DevOps is despair. &amp;ndash; Gene Kim
If HW and SW are sufficiently fault tolerant, the remaining problems are human. &amp;ndash; TPoCSA
CAMS: culture, automation, measurement, and sharing. &amp;ndash; D. Edwards, J. Willis (2010)
 DevOps is a set of techniques to solve the chronic conflict between Development an IT Operations. This conflict causes:
 increased time to market problematic code deployments increased number of Sev 1 outages unplanned work technical debt  The techniques are:</description>
    </item>
    
    <item>
      <title>Generate Random File</title>
      <link>http://jreisinger.github.io/posts/gen_rand_file/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jreisinger.github.io/posts/gen_rand_file/</guid>
      <description> How to generate a file of a defined size (ex. 100MB) with random content
binary file: dd if=/dev/urandom of=file.dat bs=1M count=100 or
dd if=/dev/urandom of=file.dat bs=`echo $((100*1024*1024))` count=1 dd if=/dev/urandom of=file.dat bs=1024 count=`echo $((100*1024))`  bs &amp;ndash; block size in bytes  text file: base64 /dev/urandom | dd of=file.txt bs=1M count=100 iflag=fullblock  base64 represents (encodes) binary data using printable ASCII characters  empty file: dd if=/dev/zero of=file.dat bs=1M count=100</description>
    </item>
    
  </channel>
</rss>